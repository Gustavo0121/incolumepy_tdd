[tool.poetry]
name = "incolume.py.tdd"
version = "2.7.0a1"
description = "Python Utilities for trainning"
authors = ["britodfbr <contato@incolume.com.br>"]
homepage="https://gitlab.com/development-incolume/treinamentos/incolumepy_tdd"

keywords = ['python', 'jedy', 'incolume', 'incolumepy', 'treinamento']
repository = 'https://gitlab.com/development-incolume/incolumepy.utils'
packages = [
    {include = "incolumepy", from=''},
]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Operating System :: OS Independent',
    'Natural Language :: Portuguese (Brazilian)',
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "License :: Free For Educational Use",
    "Topic :: Education",
    'Topic :: Utilities',
]
include = [
  'README.md',
  "CHANGELOG.md",
  'docs/CONTRIBUTORS.md',
]
exclude = [
  "examples/",
  "ez_setup",
  "tests/",
]

[tool.poetry.dependencies]
python = ">=3.7.0,<3.11.0"

[tool.poetry.dev-dependencies]
nose = "1.3.7"
tox = "3.14.3"
mock = "3.0.5"
bs4 = "0.0.1"
html5lib = "1.0.1"
ipdb = "0.12.3"
python-magic = "^0.4.18"
requests = "2.22.0"
Faker = "^5.0.0"
selenium-wire = "^2.1.2"
pandas = "^1.1.5"
openpyxl = "^3.0.5"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
incolumepy-utils = {git = "https://gitlab.com/development-incolume/incolumepy.utils.git", rev = "2.10.0"}
taskipy = "^1.12.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
log_format = '%(asctime)s; %(levelname)-8s; %(name)s; %(module)s; %(funcName)s; %(message)s'
log_date_format ='%FT%T%N%z'
#addopts = "--doctest-modules --cov=coding_dojo_jedi -sx --cov-report term-missing --cov-report html:coverage_report/html --cov-report xml:coverage_report/cov.xml"
testpaths = [
  "tests",
  "src/incolumepy/tdd",
]
python_files = [
  "test_*.py",
  "*_tests.py"
]

markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "webtest: marks tests as webtest (deselect with '-m \"not webtest\"')",
  "fast: marks tests as fast (deselect with '-m \"not fast\"')",
]

[tool.taskipy.variables]
path = "incolume/ tests/"
CHANGELOGFILE = "docs/about/CHANGELOG.md"
URLCOMPARE = "https://github.com/incolume-jedi/coding-dojo/compare"

[tool.taskipy.tasks]
#bandit={help='', cmd='poetry run bandit -c pyproject.toml -r {path}', use_vars=true}
#pre_check-all = {cmd='echo Starting Check all ..', help=''}
#check-all = {cmd='poetry run task clean-all; poetry run task lint; poetry run task sec',  help = "Checking all" }
#post_check-all = {cmd='echo Checking finished!', help=''}
clean = {cmd = "echo -n 'Starting cleanning environment..'; find ./ \\( -wholename '*report_coverage' -o -name '*.pyc' -o -name '*~' -o -name '*.log' -o -name '*.log.*' -o -name '.cache' -o -name '.coverage' \\) -delete ; echo ' ok' ",  help = "Shallow clean into environment (.pyc, .cache, .egg, .log, et all)" }
pre_clean-all = {cmd='poetry run task clean', help=''}
clean-all = {cmd = "echo -n 'Starting Deep cleanning ..'; find ./ \\( -name '*_cache' -o -name '*cache__' -o -name dist -o -name build -o -name .tox -o -name site -o -name coverage_report \\) -exec rm -rf {} 2> /dev/null \\; ; echo ' Deep cleaning finished!' ",  help = "Deep cleanning into environment (dist, build, htmlcov, .tox, *_cache, et all)" }
pre_docs-build={help='Pre docs-build', cmd="poetry run task gcl"}
docs-build = {help="Generate documentation", cmd="poetry run mkdocs gh-deploy --config-file mkdocs.yml --remote-branch webdoc"}
docs-serve = {help="Run server documentation", cmd="poetry run mkdocs serve"}
lint-all = {help="Run all linters", cmd="poetry run task clean-all; poetry run task pre_lint && poetry run task lint_mypy && poetry run task lint_ruff"}
pre_lint="task lint_blue && task lint_isort && task lint_flake8 && task lint_pydocstyle && task lint_mypy && task lint_pylint"
lint={help='Checking all linters configurated', cmd=''}
lint_black={help='Checking with black', cmd='echo --black--; poetry run black --check --diff {path}', use_vars=true}
lint_blue={help='Checking with blue', cmd='echo --blue--; poetry run blue --check --diff {path}', use_vars=true}
lint_flake8={help='Checking with flake8', cmd='echo --flake8--; poetry run flake8 --config pyproject.toml {path}', use_vars=true}
lint_isort={help='Checking with isort', cmd='echo --isort--; poetry run isort --profile black --check --atomic --py all -m 3 {path}', use_vars=true}
lint_mypy={help='Checking with mypy', cmd='echo --mypy--; poetry run mypy --check {path}', use_vars=true}
lint_pydocstyle={help='Checking with pydocstyle', cmd='echo --pydocstyle--; poetry run pydocstyle {path}', use_vars=true}
lint_pylint={help='Checking with pylint', cmd='echo --pylint--; poetry run pylint {path}', use_vars=true}
lint_ruff={help='', cmd='echo --ruff--; poetry run ruff check --preview {path}', use_vars=true}
pre_patch={help='Run linters tools', cmd="poetry run task lint"}
patch={cmd='v=$(poetry version patch) && poetry run task tests && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='Generate a patch Sematic Version'}
post_patch={help='Run securety tools', cmd="poetry run task bandit && poetry run task safety"}
premajor={cmd='v=$(poetry version premajor) && poetry run task tests && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='poetry version premajor'}
preminor={cmd='v=$(poetry version preminor) && poetry run task tests && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='poetry version preminor'}
prerelease={cmd='v=$(poetry version prerelease) && poetry run task tests && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='poetry version prerelease'}
safety={help='Check safety of packages into project.', cmd='poetry run safety check'}
pre_sec={help='Securance validations', cmd='poetry run task bandit && poetry run task safety'}
sec={help="Checking environment's safety", cmd=''}
pre_changelog='poetry run pytest -m fast'
pre_tests={help='', cmd='task clean-all'}
tests={help='run all tests', cmd='poetry run pytest -m "not webtest"'}
pre_test-all={help='', cmd='task lint'}
test-all={help='Test all cases', cmd='task tests'}
changelog = {help='Update changelog file', cmd = "poetry run gcl {CHANGELOGFILE} -u {URLCOMPARE} && echo CHANGELOG file - {CHANGELOGFILE} - updated with success.;echo", use_vars = true }
gcl = {help='Update changelog file', cmd='poetry run task changelog'}
setup = { help = 'Configure environment develop', cmd='git config core.hooksPath .git-hooks/'}
